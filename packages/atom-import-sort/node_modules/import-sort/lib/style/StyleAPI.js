"use strict";
var isNodeModulePredicate = require("is-builtin-module");
function member(predicateOrComparator) {
    if (predicateOrComparator.length === 1) {
        var predicate_1 = predicateOrComparator;
        return function (imported) {
            var member = imported.defaultMember || imported.namespaceMember || imported.namedMembers[0].alias;
            return predicate_1(member);
        };
    }
    else {
        var comparator_1 = predicateOrComparator;
        return function (firstImport, secondImport) {
            var first = firstImport.defaultMember || firstImport.namespaceMember || firstImport.namedMembers[0].alias;
            var second = secondImport.defaultMember || secondImport.namespaceMember || secondImport.namedMembers[0].alias;
            return comparator_1(first, second);
        };
    }
}
function moduleName(predicateOrComparator) {
    if (predicateOrComparator.length === 1) {
        var predicate_2 = predicateOrComparator;
        return function (imported) {
            var member = imported.moduleName;
            return predicate_2(member);
        };
    }
    else {
        var comparator_2 = predicateOrComparator;
        return function (firstImport, secondImport) {
            var first = firstImport.moduleName;
            var second = secondImport.moduleName;
            return comparator_2(first, second);
        };
    }
}
function name(comparator) {
    return function (firstNamedMember, secondNamedMember) {
        return comparator(firstNamedMember.name, secondNamedMember.name);
    };
}
function alias(comparator) {
    return function (firstNamedMember, secondNamedMember) {
        return comparator(firstNamedMember.alias, secondNamedMember.alias);
    };
}
function always() {
    return true;
}
function not(matcher) {
    return function (imported) {
        return !matcher(imported);
    };
}
function and() {
    var matchers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        matchers[_i - 0] = arguments[_i];
    }
    return function (imported) {
        return matchers.every(function (matcher) { return matcher(imported); });
    };
}
function or() {
    var matchers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        matchers[_i - 0] = arguments[_i];
    }
    return function (imported) {
        return matchers.some(function (matcher) { return matcher(imported); });
    };
}
function hasMember(imported) {
    return hasDefaultMember(imported) || hasNamespaceMember(imported) || hasNamedMembers(imported);
}
function hasNoMember(imported) {
    return !hasMember(imported);
}
function hasDefaultMember(imported) {
    return !!imported.defaultMember;
}
function hasNamespaceMember(imported) {
    return !!imported.namespaceMember;
}
function hasNamedMembers(imported) {
    return imported.namedMembers.length > 0;
}
function hasOnlyDefaultMember(imported) {
    return hasDefaultMember(imported) && !hasNamespaceMember(imported) && !hasNamedMembers(imported);
}
function hasOnlyNamespaceMember(imported) {
    return !hasDefaultMember(imported) && hasNamespaceMember(imported) && !hasNamedMembers(imported);
}
function hasOnlyNamedMembers(imported) {
    return !hasDefaultMember(imported) && !hasNamespaceMember(imported) && hasNamedMembers(imported);
}
function hasMultipleMembers(imported) {
    return (imported.namedMembers.length + (imported.defaultMember ? 1 : 0) + (imported.namespaceMember ? 1 : 0)) > 1;
}
;
function hasSingleMember(imported) {
    return (imported.namedMembers.length + (imported.defaultMember ? 1 : 0)) === 1 && !hasNamespaceMember(imported);
}
function isNodeModule(imported) {
    return isNodeModulePredicate(imported.moduleName);
}
function isRelativeModule(imported) {
    return imported.moduleName.indexOf(".") === 0;
}
function isAbsoluteModule(imported) {
    return !isRelativeModule(imported);
}
function startsWithUpperCase(text) {
    var start = text.charAt(0);
    return text.charAt(0) === start.toUpperCase();
}
function startsWithLowerCase(text) {
    var start = text.charAt(0);
    return text.charAt(0) === start.toLowerCase();
}
function startsWithAlphanumeric(text) {
    return !!text.match(/^[A-Za-z0-9]/);
}
function naturally(first, second) {
    return first.localeCompare(second, "en");
}
function unicode(first, second) {
    if (first < second) {
        return -1;
    }
    if (first > second) {
        return 1;
    }
    return 0;
}
function dotSegmentCount(firstImport, secondImport) {
    var firstCount = (firstImport.moduleName.match(/\./g) || []).length;
    var secondCount = (secondImport.moduleName.match(/\./g) || []).length;
    if (firstCount > secondCount) {
        return -1;
    }
    if (firstCount < secondCount) {
        return 1;
    }
    return 0;
}
var StyleAPI = {
    member: member,
    moduleName: moduleName,
    name: name,
    alias: alias,
    always: always,
    not: not,
    and: and,
    or: or,
    hasMember: hasMember,
    hasNoMember: hasNoMember,
    hasNamespaceMember: hasNamespaceMember,
    hasDefaultMember: hasDefaultMember,
    hasNamedMembers: hasNamedMembers,
    hasOnlyDefaultMember: hasOnlyDefaultMember,
    hasOnlyNamespaceMember: hasOnlyNamespaceMember,
    hasOnlyNamedMembers: hasOnlyNamedMembers,
    hasMultipleMembers: hasMultipleMembers,
    hasSingleMember: hasSingleMember,
    isNodeModule: isNodeModule,
    isRelativeModule: isRelativeModule,
    isAbsoluteModule: isAbsoluteModule,
    startsWithUpperCase: startsWithUpperCase,
    startsWithLowerCase: startsWithLowerCase,
    startsWithAlphanumeric: startsWithAlphanumeric,
    naturally: naturally,
    unicode: unicode,
    dotSegmentCount: dotSegmentCount,
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = StyleAPI;
